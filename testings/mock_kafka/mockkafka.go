// Code generated by MockGen. DO NOT EDIT.
// Source: kafka.go
//
// Generated by this command:
//
//	mockgen -source=kafka.go -package=mockkafka -destination=testings/mock_kafka/mockkafka.go
//
// Package mockkafka is a generated GoMock package.
package mockkafka

import (
	context "context"
	reflect "reflect"

	kafka "github.com/segmentio/kafka-go"
	gomock "go.uber.org/mock/gomock"
)

// MockKafka is a mock of Kafka interface.
type MockKafka struct {
	ctrl     *gomock.Controller
	recorder *MockKafkaMockRecorder
}

// MockKafkaMockRecorder is the mock recorder for MockKafka.
type MockKafkaMockRecorder struct {
	mock *MockKafka
}

// NewMockKafka creates a new mock instance.
func NewMockKafka(ctrl *gomock.Controller) *MockKafka {
	mock := &MockKafka{ctrl: ctrl}
	mock.recorder = &MockKafkaMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKafka) EXPECT() *MockKafkaMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockKafka) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockKafkaMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockKafka)(nil).Close))
}

// CommitMessages mocks base method.
func (m *MockKafka) CommitMessages(arg0 context.Context, arg1 kafka.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CommitMessages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CommitMessages indicates an expected call of CommitMessages.
func (mr *MockKafkaMockRecorder) CommitMessages(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommitMessages", reflect.TypeOf((*MockKafka)(nil).CommitMessages), arg0, arg1)
}

// DialContext mocks base method.
func (m *MockKafka) DialContext(arg0 context.Context, arg1, arg2 string) (*kafka.Conn, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DialContext", arg0, arg1, arg2)
	ret0, _ := ret[0].(*kafka.Conn)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DialContext indicates an expected call of DialContext.
func (mr *MockKafkaMockRecorder) DialContext(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DialContext", reflect.TypeOf((*MockKafka)(nil).DialContext), arg0, arg1, arg2)
}

// FetchMessage mocks base method.
func (m *MockKafka) FetchMessage(arg0 context.Context) (kafka.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchMessage", arg0)
	ret0, _ := ret[0].(kafka.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchMessage indicates an expected call of FetchMessage.
func (mr *MockKafkaMockRecorder) FetchMessage(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchMessage", reflect.TypeOf((*MockKafka)(nil).FetchMessage), arg0)
}

// NewReader mocks base method.
func (m *MockKafka) NewReader(arg0 string) *kafka.Reader {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewReader", arg0)
	ret0, _ := ret[0].(*kafka.Reader)
	return ret0
}

// NewReader indicates an expected call of NewReader.
func (mr *MockKafkaMockRecorder) NewReader(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewReader", reflect.TypeOf((*MockKafka)(nil).NewReader), arg0)
}

// ReadMessage mocks base method.
func (m *MockKafka) ReadMessage(arg0 context.Context) (kafka.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadMessage", arg0)
	ret0, _ := ret[0].(kafka.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadMessage indicates an expected call of ReadMessage.
func (mr *MockKafkaMockRecorder) ReadMessage(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadMessage", reflect.TypeOf((*MockKafka)(nil).ReadMessage), arg0)
}

// WriteMessages mocks base method.
func (m *MockKafka) WriteMessages(arg0 context.Context, arg1 kafka.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteMessages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteMessages indicates an expected call of WriteMessages.
func (mr *MockKafkaMockRecorder) WriteMessages(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteMessages", reflect.TypeOf((*MockKafka)(nil).WriteMessages), arg0, arg1)
}
